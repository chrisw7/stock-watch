/*
 * WatchList.java
 *
 * Created on Jan 8, 2013, 10:48:04 AM
 */
/**
 *
 * @author chwil6598
 * The main program for the project. it includes updating, buying, and selling 
 */
package stockwatch;

import java.awt.Color;
import org.jdesktop.application.Action;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat;

public class watchList extends javax.swing.JDialog {
    //global variables needed for the jtable to run

    public static Object[][] data = new Object[10][7];
    public double time = System.currentTimeMillis();
    public final static String[] columnNames = {"Purchaser", "Stock Symbol",
        "# of shares",
        "Initial Value",
        "Current Value",
        "Profit per Share",
        "Value of Shares"};
    //the characteristics of the starting cash and max stocks
    public final static int MAX_STOCKS = 10, INIT_FUNDS = 100000;
    //a global variable for stocks to edit
    public static Stock[] stockList = new Stock[10];
    //set a variable for empty stock
    public static Stock empty = new Stock("N/A", "N/A", 0, 0, 0, "N/A");

    /** Creates new form WatchList */
    public watchList(java.awt.Frame parent) {
        super(parent);
        initComponents();
        getRootPane().setDefaultButton(btnBackToLogin);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("checked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTime = new javax.swing.JLabel();
        lblAccount = new javax.swing.JLabel();
        lbCashLeft = new javax.swing.JLabel();
        lbTotalWorth = new javax.swing.JLabel();
        amtCashLeft = new javax.swing.JLabel();
        amtTotalWorth = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnBackToLogin = new javax.swing.JButton();
        btnBuy = new javax.swing.JButton();
        btnSell = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(stockwatch.StockWatchApp.class).getContext().getResourceMap(watchList.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(600, 440));
        setName("Form"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblTime.setText(resourceMap.getString("lblTime.text")); // NOI18N
        lblTime.setName("lblTime"); // NOI18N

        lblAccount.setFont(resourceMap.getFont("lblAccount.font")); // NOI18N
        lblAccount.setText(resourceMap.getString("lblAccount.text")); // NOI18N
        lblAccount.setName("lblAccount"); // NOI18N

        lbCashLeft.setFont(resourceMap.getFont("lbCashLeft.font")); // NOI18N
        lbCashLeft.setText(resourceMap.getString("lbCashLeft.text")); // NOI18N
        lbCashLeft.setName("lbCashLeft"); // NOI18N

        lbTotalWorth.setFont(resourceMap.getFont("lbTotalWorth.font")); // NOI18N
        lbTotalWorth.setText(resourceMap.getString("lbTotalWorth.text")); // NOI18N
        lbTotalWorth.setToolTipText(resourceMap.getString("lbTotalWorth.toolTipText")); // NOI18N
        lbTotalWorth.setName("lbTotalWorth"); // NOI18N

        amtCashLeft.setText(resourceMap.getString("amtCashLeft.text")); // NOI18N
        amtCashLeft.setName("amtCashLeft"); // NOI18N

        amtTotalWorth.setText(resourceMap.getString("amtTotalWorth.text")); // NOI18N
        amtTotalWorth.setToolTipText(resourceMap.getString("amtTotalWorth.toolTipText")); // NOI18N
        amtTotalWorth.setName("amtTotalWorth"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(stockwatch.StockWatchApp.class).getContext().getActionMap(watchList.class, this);
        btnUpdate.setAction(actionMap.get("update")); // NOI18N
        btnUpdate.setFont(resourceMap.getFont("btnUpdate.font")); // NOI18N
        btnUpdate.setForeground(resourceMap.getColor("btnUpdate.foreground")); // NOI18N
        btnUpdate.setText(resourceMap.getString("btnUpdate.text")); // NOI18N
        btnUpdate.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnUpdate.setContentAreaFilled(false);
        btnUpdate.setName("btnUpdate"); // NOI18N

        btnBackToLogin.setAction(actionMap.get("quit")); // NOI18N
        btnBackToLogin.setFont(resourceMap.getFont("btnBackToLogin.font")); // NOI18N
        btnBackToLogin.setForeground(resourceMap.getColor("btnBackToLogin.foreground")); // NOI18N
        btnBackToLogin.setText(resourceMap.getString("btnBackToLogin.text")); // NOI18N
        btnBackToLogin.setActionCommand(resourceMap.getString("btnBackToLogin.actionCommand")); // NOI18N
        btnBackToLogin.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnBackToLogin.setContentAreaFilled(false);
        btnBackToLogin.setName("btnBackToLogin"); // NOI18N

        btnBuy.setAction(actionMap.get("buy")); // NOI18N
        btnBuy.setFont(resourceMap.getFont("btnBuy.font")); // NOI18N
        btnBuy.setForeground(resourceMap.getColor("btnBuy.foreground")); // NOI18N
        btnBuy.setText(resourceMap.getString("btnBuy.text")); // NOI18N
        btnBuy.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnBuy.setContentAreaFilled(false);
        btnBuy.setName("btnBuy"); // NOI18N

        btnSell.setAction(actionMap.get("sell")); // NOI18N
        btnSell.setFont(resourceMap.getFont("btnSell.font")); // NOI18N
        btnSell.setForeground(resourceMap.getColor("btnSell.foreground")); // NOI18N
        btnSell.setText(resourceMap.getString("btnSell.text")); // NOI18N
        btnSell.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnSell.setContentAreaFilled(false);
        btnSell.setName("btnSell"); // NOI18N

        jLabel1.setIcon(resourceMap.getIcon("jLabel1.icon")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Stock Symbol", "# of shares", "Purchaser", "Initial Value", "Current Value", "Difference"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTable1.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("jTable1.columnModel.title0")); // NOI18N
        jTable1.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("jTable1.columnModel.title1")); // NOI18N
        jTable1.getColumnModel().getColumn(2).setHeaderValue(resourceMap.getString("jTable1.columnModel.title5")); // NOI18N
        jTable1.getColumnModel().getColumn(3).setHeaderValue(resourceMap.getString("jTable1.columnModel.title2")); // NOI18N
        jTable1.getColumnModel().getColumn(4).setHeaderValue(resourceMap.getString("jTable1.columnModel.title3")); // NOI18N
        jTable1.getColumnModel().getColumn(5).setHeaderValue(resourceMap.getString("jTable1.columnModel.title4")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addGap(78, 78, 78)
                        .addComponent(lblAccount))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbCashLeft)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(amtCashLeft))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbTotalWorth)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(amtTotalWorth)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 214, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSell, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnBackToLogin)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTime))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBackToLogin, btnBuy, btnSell, btnUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(lblAccount)))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCashLeft)
                            .addComponent(amtCashLeft))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amtTotalWorth)
                            .addComponent(lbTotalWorth)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBackToLogin)
                            .addComponent(btnSell, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(11, 11, 11)
                .addComponent(lblTime)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnBackToLogin, btnBuy, btnSell, btnUpdate});

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //public static ArrayList groups = new ArrayList();
    public static GroupData currentGroup;
    
    public void updateLabel() {//update the labels for remaining funds and total worth
        //decimal format to keep things in money format
        DecimalFormat df = new DecimalFormat("$#,###,###.00");
        amtCashLeft.setText(df.format(currentGroup.getFunds()) + "");
        //calculate grp profits
        double profit = currentGroup.getWorth() - INIT_FUNDS;
        amtTotalWorth.setText(df.format(profit) + "");
        if(profit <0){//if loss:
            amtTotalWorth.setForeground(Color.red);
        }else{
            amtTotalWorth.setForeground(Color.green);
        }
        
    }
    
private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    //when the window opens, load the information requored
    load();
    lblAccount.setText(currentGroup.getGroup() + "'s WatchList");
    
}//GEN-LAST:event_formWindowOpened
    
private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
// TODO add your handling code here: 
    //close program
    System.exit(0);
}//GEN-LAST:event_formWindowClosing
    public void load() {// the method to load the information from the datafile
        try {
            //filereader variables for the specified group's file
            FileReader fr = new FileReader("src\\groups\\" + StockWatchView.grpToLoad + ".csv");
            BufferedReader br = new BufferedReader(fr);

            //instance stock variable
            Stock[] stocksToAdd = new Stock[MAX_STOCKS];
            int count = 0;
            //read the next two lines
            String line = br.readLine();
            String stk = br.readLine();
            while (!stk.equals("null")) {//while the stock isnt equal to null
                //split the line and read information and store into the stocks
                String[] stockRecord = stk.split(",");
                stocksToAdd[count] = new Stock(stockRecord[0], stockRecord[1], Double.parseDouble(stockRecord[2]), Double.parseDouble(stockRecord[3]), Integer.parseInt(stockRecord[4]), stockRecord[5]);
                count++;
                //read the next line of stocks
                stk = br.readLine();
                
            }
            //reset the counter
            count = 0;
            //split the first line read and store that as the groups name and other info
            String[] str = line.split(",");
            currentGroup = new GroupData(str[1], str[0], Double.parseDouble(str[2]), StockWatchView.stockCount);
            currentGroup.addAStock(stocksToAdd);
            
            for (int i = 0; i < stocksToAdd.length; i++) {//reset the stocks to add variable
                stocksToAdd[i] = null;
            }
            //close the reader
            br.close();
        } catch (IOException e) {
            System.out.println(e.toString());
        }
        //reinitialize the lost of stocks and update the table and label
        stockList = currentGroup.getAllStocks();
        loadTable();
        updateLabel();
    }
    
    public void loadTable() {//update the tables information
        //decimalformat to set everything into cash format
        DecimalFormat df = new DecimalFormat("$#,###,##0.00");
        
        
        for (int i = 0; i < 10; i++) {//loop through 10 for all 10 stocks
            try {//catch error incase of nullpointer.
                //stores the data to print into the jtable into a 2d array including symbol, number of stocks, starting value, current value, net change, and the total
                data[i][1] = ((Stock) stockList[i]).getSymbol();
                data[i][2] = ((Stock) stockList[i]).getNum();
                data[i][0] = ((Stock) stockList[i]).getNm();
                data[i][3] = df.format(((Stock) stockList[i]).getSVal());
                data[i][4] = df.format(((Stock) stockList[i]).getCVal());
                data[i][5] = df.format(((Stock) stockList[i]).getChange());
                data[i][6] = df.format(((Stock) stockList[i]).getCVal() * ((Stock) stockList[i]).getNum());
                
            } catch (NullPointerException e) {//if nullpointer is thrown, the stock is blank. in that case, load the information from the empty stock
                data[i][1] = (empty).getSymbol();
                data[i][2] = (empty).getNum();
                data[i][0] = (empty).getNm();
                data[i][3] = (empty).getSVal();
                data[i][4] = (empty).getCVal();
                data[i][5] = (empty).getChange();
                data[i][6] = "$0.00";
            }
            
        }
        //set everything to display into the jtable
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                data, columnNames));
        
        
        
    }
    
    @Action
    public void exit() {
        
        dispose();
        
    }
    
    @Action
    public void update() {
        
        if ((System.currentTimeMillis() - time) > 3000) {
            //Update 'last updated label' by checking the time and returning the time in date format
            Calendar calndr = Calendar.getInstance();
            calndr.getTime();
            SimpleDateFormat crntTime = new SimpleDateFormat("MMM d h:mm a");
            lblTime.setText("Last Updated: " + crntTime.format(calndr.getTime()));
            //reload the currentGroup to ensure maximum accuracy
            load();
            //updating the actual stocks
            currentGroup.update();
            //save everything into the groups file
            saveNBack();
            time = System.currentTimeMillis();
        } else {
            JOptionPane.showMessageDialog(null, "Please wait 3 seconds between updates/buying", "Patience!", JOptionPane.WARNING_MESSAGE);
        }
        
    }
    
    @Action
    public void buy() {//buying a stock
        //ask user for symbol of the stock
        String stckSymb = JOptionPane.showInputDialog("Please enter the symbol of the stock you wish to purchase");
        try {//try catch to see if the user entered a number
            //enter the number of stocks you would like to purchase
            int amount = Integer.parseInt(JOptionPane.showInputDialog(null, "How many stocks do you wish to purchase?\n\nPlease make sure that the other members of the group aren't trying to buy or sell at the same time a you\n(wait until they have finished before continuing past this point!)"));
            //run the buystock method after loading the most recent version 
            load();
            currentGroup.buyStock(stckSymb, amount);
            StockWatchView.stockCount += 1;//increment counter
            //save stuff into the datafile
            saveNBack();
            //update the table
            update();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter an integer next time", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    @Action
    public void saveNBack() {//save current information to data files

        try {//try catch to write
            //variables to store infmation to write
            String grp = "";
            grp += currentGroup.getGroup() + "," + currentGroup.getClss() + "," + currentGroup.getFunds() + "\n";
            
            for (int x = 0; x < 10; x++) {//loop through the 10 stocks and print their purestrings
                try {
                    grp += currentGroup.getStock(x).toPureString();
                } catch (NullPointerException e) {
                }
            }
            grp += "null";//add null to the group as a sentinel
            //recreate the file
            File f2 = new File("src\\groups\\" + currentGroup.getGroup() + ".csv");
            f2.delete();
            //writer variable
            BufferedWriter br = new BufferedWriter(new FileWriter("src\\groups\\" + currentGroup.getGroup() + ".csv"));
            //write the data to the file and close the variable
            br.write(grp);
            br.close();
        } catch (IOException e) {//error message
            JOptionPane.showMessageDialog(null, "Please don't open any files stored inside the folder " + System.getProperty("user.dir") + "\nPlease close all encoded files and restart this program.", "File Error", JOptionPane.ERROR_MESSAGE);
            
        }
        updateLabel();//update labels after saving
    }
    
    @Action
    public void sell() {//selling a stock
        //ask the user for the symbol they want to sell
        String stckSymb = JOptionPane.showInputDialog("Please enter the symbol of the stock you wish to sell");
        try {
            //ask the user for amount
            int amount = Integer.parseInt(JOptionPane.showInputDialog(null, "How many stocks do you wish to sell? (enter -1 to sell all)\n\nPlease make sure that the other members of the group aren't trying to buy or sell at the same time a you\n(wait until they have finished before continuing past this point!)"));
            //run the sell stock method after loading newest version
            load();
            currentGroup.sellStock(stckSymb, amount);
            //if amount is -1 then all is sold and decremenr the counter
            if (amount == -1) {
                StockWatchView.stockCount -= 1;//decrement counter
            }
            //save everything to the file again
            saveNBack();
            //update the file
            update();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter an integer next time");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel amtCashLeft;
    private javax.swing.JLabel amtTotalWorth;
    private javax.swing.JButton btnBackToLogin;
    private javax.swing.JButton btnBuy;
    private javax.swing.JButton btnSell;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbCashLeft;
    private javax.swing.JLabel lbTotalWorth;
    private javax.swing.JLabel lblAccount;
    private javax.swing.JLabel lblTime;
    // End of variables declaration//GEN-END:variables
}
