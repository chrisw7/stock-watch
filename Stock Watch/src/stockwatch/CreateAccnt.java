/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CreateAccnt.java
 * Stanley Hu, Alan Cai, Chris Williams
 * The form used to create a new user and record it into the database.
 * 
 *
 * Created on Jan 8, 2013, 8:33:49 PM
 */
package stockwatch;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;

/**
 *
 * @author Chris
 */
public class CreateAccnt extends javax.swing.JDialog {

    public static ArrayList grpInfoList = new ArrayList();
    public static ArrayList classList = new ArrayList();

    /** Creates new form CreateAccnt */
    public CreateAccnt(java.awt.Frame parent) {
        super(parent);
        initComponents();
        getRootPane().setDefaultButton(btnCreate);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userPassword = new javax.swing.JPasswordField();
        userNm = new javax.swing.JTextField();
        lblPass = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        userPassword1 = new javax.swing.JPasswordField();
        lblPass1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnChkUserNm = new javax.swing.JButton();
        btnCreateGroup = new javax.swing.JButton();
        lblClassCode = new javax.swing.JLabel();
        lblGrpName = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        classCode = new javax.swing.JTextField();
        grpCode = new javax.swing.JTextField();
        lblBadAccnt = new javax.swing.JLabel();
        lblLogo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(stockwatch.StockWatchApp.class).getContext().getResourceMap(CreateAccnt.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setIconImage(null);
        setMinimumSize(new java.awt.Dimension(495, 380));
        setModal(true);
        setName("Form"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        userPassword.setText(resourceMap.getString("userPassword.text")); // NOI18N
        userPassword.setName("userPassword"); // NOI18N
        userPassword.setNextFocusableComponent(userPassword1);
        getContentPane().add(userPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 211, -1));

        userNm.setText(resourceMap.getString("userNm.text")); // NOI18N
        userNm.setName("userNm"); // NOI18N
        userNm.setNextFocusableComponent(userPassword);
        getContentPane().add(userNm, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 211, -1));

        lblPass.setText(resourceMap.getString("lblPass.text")); // NOI18N
        lblPass.setName("lblPass"); // NOI18N
        getContentPane().add(lblPass, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 223, -1, -1));

        lblUser.setText(resourceMap.getString("lblUser.text")); // NOI18N
        lblUser.setName("lblUser"); // NOI18N
        getContentPane().add(lblUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 193, -1, -1));

        userPassword1.setText(resourceMap.getString("userPassword1.text")); // NOI18N
        userPassword1.setName("userPassword1"); // NOI18N
        userPassword1.setNextFocusableComponent(grpCode);
        getContentPane().add(userPassword1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, 211, -1));

        lblPass1.setText(resourceMap.getString("lblPass1.text")); // NOI18N
        lblPass1.setName("lblPass1"); // NOI18N
        getContentPane().add(lblPass1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 252, -1, -1));

        jLabel1.setName("jLabel1"); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(472, 169, -1, 22));

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(stockwatch.StockWatchApp.class).getContext().getActionMap(CreateAccnt.class, this);
        btnChkUserNm.setAction(actionMap.get("chkUserName")); // NOI18N
        btnChkUserNm.setText(resourceMap.getString("btnChkUserNm.text")); // NOI18N
        btnChkUserNm.setName("btnChkUserNm"); // NOI18N
        btnChkUserNm.setNextFocusableComponent(btnCreate);
        getContentPane().add(btnChkUserNm, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 187, 121, -1));

        btnCreateGroup.setAction(actionMap.get("newGroup")); // NOI18N
        btnCreateGroup.setText(resourceMap.getString("btnCreateGroup.text")); // NOI18N
        btnCreateGroup.setToolTipText(resourceMap.getString("btnCreateGroup.toolTipText")); // NOI18N
        btnCreateGroup.setName("btnCreateGroup"); // NOI18N
        getContentPane().add(btnCreateGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 277, -1, -1));

        lblClassCode.setText(resourceMap.getString("lblClassCode.text")); // NOI18N
        lblClassCode.setName("lblClassCode"); // NOI18N
        getContentPane().add(lblClassCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(58, 313, -1, -1));

        lblGrpName.setText(resourceMap.getString("lblGrpName.text")); // NOI18N
        lblGrpName.setName("lblGrpName"); // NOI18N
        getContentPane().add(lblGrpName, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 283, -1, -1));

        btnCreate.setAction(actionMap.get("verifyAccnt")); // NOI18N
        btnCreate.setText(resourceMap.getString("btnCreate.text")); // NOI18N
        btnCreate.setName("btnCreate"); // NOI18N
        getContentPane().add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 218, 121, 54));

        btnCancel.setAction(actionMap.get("close")); // NOI18N
        btnCancel.setText(resourceMap.getString("btnCancel.text")); // NOI18N
        btnCancel.setName("btnCancel"); // NOI18N
        getContentPane().add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 307, 121, -1));

        classCode.setText(resourceMap.getString("classCode.text")); // NOI18N
        classCode.setName("classCode"); // NOI18N
        classCode.setNextFocusableComponent(btnChkUserNm);
        getContentPane().add(classCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 310, 211, -1));

        grpCode.setToolTipText(resourceMap.getString("grpCode.toolTipText")); // NOI18N
        grpCode.setName("grpCode"); // NOI18N
        grpCode.setNextFocusableComponent(classCode);
        getContentPane().add(grpCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, 211, -1));

        lblBadAccnt.setFont(resourceMap.getFont("lblBadAccnt.font")); // NOI18N
        lblBadAccnt.setForeground(resourceMap.getColor("lblBadAccnt.foreground")); // NOI18N
        lblBadAccnt.setText(resourceMap.getString("lblBadAccnt.text")); // NOI18N
        lblBadAccnt.setName("lblBadAccnt"); // NOI18N
        getContentPane().add(lblBadAccnt, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, -1, -1));

        lblLogo.setIcon(resourceMap.getIcon("lblLogo.icon")); // NOI18N
        lblLogo.setText(resourceMap.getString("lblLogo.text")); // NOI18N
        lblLogo.setName("lblLogo"); // NOI18N
        getContentPane().add(lblLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, -1, -1));

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setForeground(resourceMap.getColor("jLabel2.foreground")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 140, -1, -1));

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, -1, -1));

        jSeparator1.setName("jSeparator1"); // NOI18N
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 470, 10));

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
// TODO add your handling code here:
    VariableStorage.loadGroup();
}//GEN-LAST:event_formWindowOpened

    public static ArrayList loadClasses() {//loads the lost of class codes that are valid for use

        try {//try catch to use filereader
            //read from a file and declare variables for checking for end of file
            FileReader fr = new FileReader("src\\Class_List.csv");
            BufferedReader br = new BufferedReader(fr);

            boolean eof = false;
            String line;
            while (!eof) {//while it isnt the end of file
                line = br.readLine();//read line
                if (line == null) {//if line is blank then its the end of file
                    eof = true;
                } else {
                    classList.add(line);//else add the line to the arraylist of classes 

                }
            }
            br.close();


        } catch (IOException e) {
            System.out.println("Error: " + e.toString());
        }
        return classList;
    }

    public static ArrayList loadGroups() {//load the group list of information

        try {//try catch
            //read from the file
            FileReader fr = new FileReader("src\\Group_List.csv");
            BufferedReader br = new BufferedReader(fr);
            //stringtokenizer to seperate the words
            StringTokenizer st;
            //variables for amount of groups made
            int grpsMade = 0;
            //end of file variable 
            boolean eof = false;
            String line;
            while (!eof) {//while it isnt the end of file
                line = br.readLine();//read the line and check if its blank
                if (line == null) {
                    eof = true;
                } else {
                    //add the read line to the grouplist arraylist of Group variables
                    VariableStorage.groupList.add(new Group(line));
                    //accumulate the counter for groups made
                    grpsMade++;
                    //read the next line and tokenize it
                    st = new StringTokenizer(br.readLine(), ",");
                    while (st.hasMoreTokens()) {
                        //if there are still more words then keep adding the names to the group
                        ((Group) (VariableStorage.groupList.get(grpsMade - 1))).recruit(st.nextToken());
                    }

                }
            }
            //close the reader
            br.close();


        } catch (IOException e) {
            //catch error
            System.out.println("Error: " + e.toString());
        }
        //return the arraylist to whichever variable needs it
        return VariableStorage.groupList;
    }

    public int findGroup(String str) {//finds the index of the specified group
        for (int i = 0; i < VariableStorage.groupList.size(); i++) {//if the group exists return the index
            if (((Group) VariableStorage.groupList.get(i)).getName().equals(str)) {
                return i;
            }
        }
        //if group doesnt exist then return -1
        return -1;
    }

    public void updateGrp() {//this updates the list of groups into the file as well as making the file for the group's info if it doesn't exist
        File f1 = new File("src\\Group_List.csv");
        f1.delete();

        try {//try catch to write to file
            BufferedWriter br = new BufferedWriter(new FileWriter("src\\Group_List.csv"));
            String grp = "";
            //loop through the arraylist and print everything in the file
            for (int i = 0; i < VariableStorage.groupList.size(); i++) {
                grp += ((Group) VariableStorage.groupList.get(i)).getName() + "\n" + ((Group) VariableStorage.groupList.get(i)).toString();
                if (i != VariableStorage.groupList.size() - 1) {
                    grp += "\n";
                }


            }
            //close the bufferedwriter
            br.write(grp);
            br.close();

        } catch (IOException e) {
            //catch error
            JOptionPane.showMessageDialog(null, "Please don't open any files stored inside the folder " + System.getProperty("user.dir") + "\nPlease close all encoded files and restart this program.");

        }



        try {//try catch for filewriting
            File f2 = new File("src\\groups\\" + grpCode.getText() + ".csv");

            if (!f2.exists()) {//check if the designated file exists, if it doesnt then create the file and store default info into the file
                BufferedWriter br = new BufferedWriter(new FileWriter(f2));
                br.write(currentG.getGroup() + "," + currentG.getClss() + "," + currentG.getFunds() + "\nnull");
                //close the bufferedwriter
                br.close();

            }
            //clear the static variable for grouplist
            VariableStorage.clear();
        } catch (IOException e) {
            //catch and return error
            JOptionPane.showMessageDialog(null, "Please don't open any files stored inside the folder " + System.getProperty("user.dir") + "\nPlease close all encoded files and restart this program.");

        }

    }
    public static GroupData currentG;//a variable to designate the current group

    @Action
    public void newGroup() {//create a new group and add it to the grouplist
        if (classList.isEmpty()) {//check if the classlist is empty, if it is then load classes
            classList = loadClasses();
        }

        for (int i = 0; i < classList.size(); i++) {//loops through all the classes
            if ((classList.get(i)).equals(classCode.getText())) {//get the class code
                i = classList.size();//get the number of classes
                //variable used to store the name of the group
                String nm = "";
                //boolean for validity
                boolean notValid = false;
                while (!notValid) {//while it isnt valid
                    nm = JOptionPane.showInputDialog("Enter the desired group name. It should 10 or less characters (and appropriate!), and contain no commas. Leave blank to cancel");//ask user for a name
                    if (nm.equals("")) {//check if its blank
                        notValid = true;//if it is then notValid is true
                    } else if (nm.length() > 10 || nm.length() < 3 || nm == null || nm.equals("") || nm.contains(",")) {//if it is valid check if it fits the requirements
                        if (nm.length() < 3) {//check for requirements and print errors
                            JOptionPane.showMessageDialog(null, "Invalid group name (should be at least 3 letters). Leave blank to cancel");
                        } else if (nm.contains(",")) {
                            JOptionPane.showMessageDialog(null, "Invalid group name (name contains one or more commas). Leave blank to cancel");
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid group name (" + (nm.length() - 10) + " character(s) too long). Leave blank to cancel");
                        }
                    } else {
                        if (findGroup(nm) == -1) {//check if the group already exists
                            notValid = true;//if it doesnt then keep going

                        } else {
                            JOptionPane.showMessageDialog(null, "Name has been taken. Leave blank to cancel");
                        }
                    }
                }
                if (nm.equals("")) {//if name is blank then no group was created
                    JOptionPane.showMessageDialog(null, "No Group was created");
                } else {//else create the group and add it to the current group varriable
                    VariableStorage.groupList.add(new Group(nm));//student added when validified
                    currentG = new GroupData(classCode.getText(), nm, watchList.INIT_FUNDS, 0);
                    //disable the buttons to change and boxes
                    btnCreateGroup.setEnabled(false);
                    grpCode.setText(nm);
                    grpCode.setEditable(false);
                }
            } else {
                if (i == classList.size() - 1) {//return error if no class is found
                    JOptionPane.showMessageDialog(null, "Please get a valid class code from your teacher before creating a  group");
                }
            }
        }
    }

    @Action
    public void close() {//prepare the window for closing by disabling the option to create another account
        userPassword.setText(null);
        userPassword1.setText(null);
        dispose();//close the actual window
    }

    public boolean findNames(String str) {//check if the username already exists
        ArrayList names = new ArrayList();//variable to store all the names
        try {
            //store all the names into the "names" variable from the file
            FileReader fr = new FileReader("src\\Login_Info.csv");
            BufferedReader br = new BufferedReader(fr);
            StringTokenizer st;
            boolean eof = false;
            String line;
            while (!eof) {
                line = br.readLine();
                if (line == null) {
                    eof = true;
                } else {
                    st = new StringTokenizer(line, ",");
                    names.add(st.nextToken());
                }
            }
            br.close();


        } catch (IOException e) {
            System.out.println("Error: " + e.toString());
        }

        for (int i = 0; i < names.size(); i++) {//loop through all the names

            if (names.get(i).equals(str)) {//check if the passed str variable matches any of the names in the arraylist and return true or false accordingly
                return true;
            }
        }
        return false;

    }

    @Action
    public boolean chkUserName() {//check if username fits the criteria. return true if fits and false if anything doesn't fit
        String userTemp = userNm.getText();//stores the username into the variable
        if (!userTemp.equals("") && userTemp != null && !userTemp.contains(",")) {//check if its empty or contains commas
            if (userTemp.length() > 20) {//check length and return error accordingly
                JOptionPane.showMessageDialog(null, "Please enter a nickname under 20 characters that your teacher will recognize");
                return false;
            } else {
                if (!findNames(userTemp)) {//if the name isn't found within the datafile set the text to show that it is available
                    lblBadAccnt.setText("Name available");
                    btnChkUserNm.setForeground(Color.blue);
                    lblBadAccnt.setForeground(Color.blue);
                    return true;
                } else {//if the name is found within the datafile set the text to show that it isn't available
                    lblBadAccnt.setText("Name invalid or in use");
                    btnChkUserNm.setForeground(Color.RED);
                    lblBadAccnt.setForeground(Color.RED);
                    return false;
                }
            }
        } else {
            lblBadAccnt.setText("Name invalid or in use");
            btnChkUserNm.setForeground(Color.RED);
            lblBadAccnt.setForeground(Color.RED);
            return false;
        }
    }

    @Action
    public void verifyAccnt() {//verify if everything in the fields are correct
        classList = loadClasses();//load the classes
        //variable to check if group exists and password
        int grpNum = findGroup(grpCode.getText());
        String pass = userPassword.getText();
        //finish student checking and add to group when approved code
        if (chkUserName()) {//if username is valid and available
            for (int i = 0; i < classList.size(); i++) {//loop through classes to check for class name
                if ((classList.get(i)).equals(classCode.getText())) {
                    i = classList.size();
                    //check if password is the same and within the length and does not contain commas
                    if (userPassword.getText().equals(userPassword1.getText()) && (pass.length() > 3 && pass.length() <= 30) && pass != null && !pass.equals("") && !pass.contains(",")) {
                        if (grpNum >= 0) {//if the group was found, prompt user for confirmation
                            int choice = JOptionPane.showConfirmDialog(null, "Confirm account:\n"
                                    + "Name: " + userNm.getText()
                                    + "\nClass: " + classCode.getText()
                                    + "\nGroup: " + grpCode.getText(), "Confirm new account", 0);

                            if (choice == 0) {
                                //if user clicks ok then create and store the information
                                ((Group) VariableStorage.groupList.get(grpNum)).recruit(newStudent().getName());
                                updateGrp();
                                btnCreate.setEnabled(false);
                                dispose();
                            } else {//else if user clicks cancel, everything is set to blank
                                JOptionPane.showMessageDialog(null, "Account Creation canceled");
                                userPassword.setText(null);
                                userPassword1.setText(null);
                                if (btnCreateGroup.isEnabled()) {
                                    VariableStorage.groupList.remove(VariableStorage.groupList.size() - 1);//student added when validified
                                    btnCreateGroup.setEnabled(true);
                                    grpCode.setText("");
                                    grpCode.setEditable(true);

                                }
                            }

                        } else {//if group doesnt exist show messaage

                            JOptionPane.showMessageDialog(null, "Group doensn't exist");
                        }
                    } else {//if password is invalid then show message
                        JOptionPane.showMessageDialog(null, "Passwords must be between 4 & 30 characters and match.");
                    }

                } else {//if class isnt found show message
                    if (i == classList.size() - 1) {
                        JOptionPane.showMessageDialog(null, "Class not found");
                    }
                }
            }


        }


    }

    public Student newStudent() {//name the new student and return the student made
        Student s = new Student(classCode.getText(), userNm.getText(), userPassword.getText(), grpCode.getText());//record the information in regards to the new student
        JOptionPane.showMessageDialog(null, "Welcome, " + s.getName());//display a welcome message


        try {//filereader and writer to write the new login info to a data file
            FileReader f = new FileReader("src\\Login_Info.csv");
            BufferedReader b = new BufferedReader(f);
            int nLines = 0;
            int marker = 0;
            //arraylist and check if line is blank
            ArrayList data = new ArrayList();
            String ln = null;
            //while loop when ln is not blank
            do {
                ln = b.readLine();
                if (ln != null) {
                    data.add(ln);
                    nLines++;
                }
            } while (ln != null);

            //delete and recreate the file
            File f1 = new File("src\\Login_Info.csv");
            f1.delete();
            //file writer variables
            FileWriter fr = new FileWriter("src\\Login_Info.csv");
            BufferedWriter br = new BufferedWriter(fr);
            //add all the data to be written into the data variable
            data.add(s.toString());//edit
            //sort the login info
            insertionSort(data);
            //loop through the data and print it into the data file
            for (int i = 0; i < data.size(); i++) {
                br.write(((String) data.get(i)));
                br.newLine();
            }
            //close the bufferedwriter
            br.close();

        } catch (IOException e) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please don't open any files stored inside the folder " + System.getProperty("user.dir") + "\nPlease close all encoded files and restart this program.");
            System.exit(-1339);
        }
        return s;


    }

    private void insertionSort(ArrayList data) {//insertion sort as done in class
        //checks for the appropriate location for the variable and inserts it into the place
        for (int n = 0; n < data.size(); n++) {
            String temp = ((String) data.get(n));
            int j = n - 1;

            while ((j >= 0) && (((String) data.get(j)).compareTo(temp)) > 0) {
                data.set((j + 1), data.get(j));
                j--;

            }
            data.set((j + 1), temp);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChkUserNm;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreateGroup;
    private javax.swing.JTextField classCode;
    private javax.swing.JTextField grpCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblBadAccnt;
    private javax.swing.JLabel lblClassCode;
    private javax.swing.JLabel lblGrpName;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblPass1;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTextField userNm;
    private javax.swing.JPasswordField userPassword;
    private javax.swing.JPasswordField userPassword1;
    // End of variables declaration//GEN-END:variables
}
